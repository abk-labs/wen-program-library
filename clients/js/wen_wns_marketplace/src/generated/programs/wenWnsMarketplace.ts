/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
} from '@solana/web3.js';
import {
  type ParsedBuyInstruction,
  type ParsedClaimRoyaltyInstruction,
  type ParsedListInstruction,
  type ParsedUnlistInstruction,
} from '../instructions';

export const WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS =
  'sALEeD9VGNquoGSXvUAKLeVbXdjiPCb3FTuTm1xSLod' as Address<'sALEeD9VGNquoGSXvUAKLeVbXdjiPCb3FTuTm1xSLod'>;

export enum WenWnsMarketplaceAccount {
  DistributionAccount,
  Listing,
}

export function identifyWenWnsMarketplaceAccount(
  account: { data: Uint8Array } | Uint8Array
): WenWnsMarketplaceAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 90, 112, 65, 49, 161, 198, 154])
      ),
      0
    )
  ) {
    return WenWnsMarketplaceAccount.DistributionAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 32, 50, 73, 43, 134, 26, 58])
      ),
      0
    )
  ) {
    return WenWnsMarketplaceAccount.Listing;
  }
  throw new Error(
    'The provided account could not be identified as a wenWnsMarketplace account.'
  );
}

export enum WenWnsMarketplaceInstruction {
  Buy,
  ClaimRoyalty,
  List,
  Unlist,
}

export function identifyWenWnsMarketplaceInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): WenWnsMarketplaceInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])
      ),
      0
    )
  ) {
    return WenWnsMarketplaceInstruction.Buy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 75, 29, 207, 114, 170, 28, 108])
      ),
      0
    )
  ) {
    return WenWnsMarketplaceInstruction.ClaimRoyalty;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 174, 193, 67, 17, 41, 132, 38])
      ),
      0
    )
  ) {
    return WenWnsMarketplaceInstruction.List;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 125, 20, 193, 209, 44, 13, 224])
      ),
      0
    )
  ) {
    return WenWnsMarketplaceInstruction.Unlist;
  }
  throw new Error(
    'The provided instruction could not be identified as a wenWnsMarketplace instruction.'
  );
}

export type ParsedWenWnsMarketplaceInstruction<
  TProgram extends string = 'sALEeD9VGNquoGSXvUAKLeVbXdjiPCb3FTuTm1xSLod',
> =
  | ({
      instructionType: WenWnsMarketplaceInstruction.Buy;
    } & ParsedBuyInstruction<TProgram>)
  | ({
      instructionType: WenWnsMarketplaceInstruction.ClaimRoyalty;
    } & ParsedClaimRoyaltyInstruction<TProgram>)
  | ({
      instructionType: WenWnsMarketplaceInstruction.List;
    } & ParsedListInstruction<TProgram>)
  | ({
      instructionType: WenWnsMarketplaceInstruction.Unlist;
    } & ParsedUnlistInstruction<TProgram>);
