/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type ClaimRoyaltyInstruction<
  TProgram extends string = typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountPaymentMint extends string | IAccountMeta<string> = string,
  TAccountDistribution extends string | IAccountMeta<string> = string,
  TAccountWenDistributionProgram extends
    | string
    | IAccountMeta<string> = 'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountDistributionPaymentTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountCreatorPaymentTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountPaymentMint extends string
        ? ReadonlyAccount<TAccountPaymentMint>
        : TAccountPaymentMint,
      TAccountDistribution extends string
        ? WritableAccount<TAccountDistribution>
        : TAccountDistribution,
      TAccountWenDistributionProgram extends string
        ? ReadonlyAccount<TAccountWenDistributionProgram>
        : TAccountWenDistributionProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountDistributionPaymentTokenAccount extends string
        ? WritableAccount<TAccountDistributionPaymentTokenAccount>
        : TAccountDistributionPaymentTokenAccount,
      TAccountCreatorPaymentTokenAccount extends string
        ? WritableAccount<TAccountCreatorPaymentTokenAccount>
        : TAccountCreatorPaymentTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimRoyaltyInstructionData = { discriminator: ReadonlyUint8Array };

export type ClaimRoyaltyInstructionDataArgs = {};

export function getClaimRoyaltyInstructionDataEncoder(): Encoder<ClaimRoyaltyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([10, 75, 29, 207, 114, 170, 28, 108]),
    })
  );
}

export function getClaimRoyaltyInstructionDataDecoder(): Decoder<ClaimRoyaltyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimRoyaltyInstructionDataCodec(): Codec<
  ClaimRoyaltyInstructionDataArgs,
  ClaimRoyaltyInstructionData
> {
  return combineCodec(
    getClaimRoyaltyInstructionDataEncoder(),
    getClaimRoyaltyInstructionDataDecoder()
  );
}

export type ClaimRoyaltyInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountPaymentMint extends string = string,
  TAccountDistribution extends string = string,
  TAccountWenDistributionProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountDistributionPaymentTokenAccount extends string = string,
  TAccountCreatorPaymentTokenAccount extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  creator: TransactionSigner<TAccountCreator>;
  paymentMint: Address<TAccountPaymentMint>;
  distribution: Address<TAccountDistribution>;
  wenDistributionProgram?: Address<TAccountWenDistributionProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  distributionPaymentTokenAccount?: Address<TAccountDistributionPaymentTokenAccount>;
  creatorPaymentTokenAccount?: Address<TAccountCreatorPaymentTokenAccount>;
};

export function getClaimRoyaltyInstruction<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountPaymentMint extends string,
  TAccountDistribution extends string,
  TAccountWenDistributionProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountDistributionPaymentTokenAccount extends string,
  TAccountCreatorPaymentTokenAccount extends string,
>(
  input: ClaimRoyaltyInput<
    TAccountPayer,
    TAccountCreator,
    TAccountPaymentMint,
    TAccountDistribution,
    TAccountWenDistributionProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountDistributionPaymentTokenAccount,
    TAccountCreatorPaymentTokenAccount
  >
): ClaimRoyaltyInstruction<
  typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountCreator,
  TAccountPaymentMint,
  TAccountDistribution,
  TAccountWenDistributionProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountDistributionPaymentTokenAccount,
  TAccountCreatorPaymentTokenAccount
> {
  // Program address.
  const programAddress = WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    paymentMint: { value: input.paymentMint ?? null, isWritable: false },
    distribution: { value: input.distribution ?? null, isWritable: true },
    wenDistributionProgram: {
      value: input.wenDistributionProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    distributionPaymentTokenAccount: {
      value: input.distributionPaymentTokenAccount ?? null,
      isWritable: true,
    },
    creatorPaymentTokenAccount: {
      value: input.creatorPaymentTokenAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.wenDistributionProgram.value) {
    accounts.wenDistributionProgram.value =
      'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay' as Address<'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.paymentMint),
      getAccountMeta(accounts.distribution),
      getAccountMeta(accounts.wenDistributionProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.distributionPaymentTokenAccount),
      getAccountMeta(accounts.creatorPaymentTokenAccount),
    ],
    programAddress,
    data: getClaimRoyaltyInstructionDataEncoder().encode({}),
  } as ClaimRoyaltyInstruction<
    typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountCreator,
    TAccountPaymentMint,
    TAccountDistribution,
    TAccountWenDistributionProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountDistributionPaymentTokenAccount,
    TAccountCreatorPaymentTokenAccount
  >;

  return instruction;
}

export type ParsedClaimRoyaltyInstruction<
  TProgram extends string = typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    creator: TAccountMetas[1];
    paymentMint: TAccountMetas[2];
    distribution: TAccountMetas[3];
    wenDistributionProgram: TAccountMetas[4];
    associatedTokenProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    distributionPaymentTokenAccount?: TAccountMetas[8] | undefined;
    creatorPaymentTokenAccount?: TAccountMetas[9] | undefined;
  };
  data: ClaimRoyaltyInstructionData;
};

export function parseClaimRoyaltyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimRoyaltyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      creator: getNextAccount(),
      paymentMint: getNextAccount(),
      distribution: getNextAccount(),
      wenDistributionProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      distributionPaymentTokenAccount: getNextOptionalAccount(),
      creatorPaymentTokenAccount: getNextOptionalAccount(),
    },
    data: getClaimRoyaltyInstructionDataDecoder().decode(instruction.data),
  };
}
