/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export type ListInstruction<
  TProgram extends string = typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSeller extends string | IAccountMeta<string> = string,
  TAccountListing extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountSellerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountManager extends string | IAccountMeta<string> = string,
  TAccountWnsProgram extends
    | string
    | IAccountMeta<string> = 'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSeller extends string
        ? ReadonlySignerAccount<TAccountSeller> &
            IAccountSignerMeta<TAccountSeller>
        : TAccountSeller,
      TAccountListing extends string
        ? WritableAccount<TAccountListing>
        : TAccountListing,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountSellerTokenAccount extends string
        ? WritableAccount<TAccountSellerTokenAccount>
        : TAccountSellerTokenAccount,
      TAccountManager extends string
        ? ReadonlyAccount<TAccountManager>
        : TAccountManager,
      TAccountWnsProgram extends string
        ? ReadonlyAccount<TAccountWnsProgram>
        : TAccountWnsProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ListInstructionData = {
  discriminator: ReadonlyUint8Array;
  listingAmount: bigint;
  paymentMint: Address;
};

export type ListInstructionDataArgs = {
  listingAmount: number | bigint;
  paymentMint: Address;
};

export function getListInstructionDataEncoder(): Encoder<ListInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['listingAmount', getU64Encoder()],
      ['paymentMint', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([54, 174, 193, 67, 17, 41, 132, 38]),
    })
  );
}

export function getListInstructionDataDecoder(): Decoder<ListInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['listingAmount', getU64Decoder()],
    ['paymentMint', getAddressDecoder()],
  ]);
}

export function getListInstructionDataCodec(): Codec<
  ListInstructionDataArgs,
  ListInstructionData
> {
  return combineCodec(
    getListInstructionDataEncoder(),
    getListInstructionDataDecoder()
  );
}

export type ListAsyncInput<
  TAccountPayer extends string = string,
  TAccountSeller extends string = string,
  TAccountListing extends string = string,
  TAccountMint extends string = string,
  TAccountSellerTokenAccount extends string = string,
  TAccountManager extends string = string,
  TAccountWnsProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  seller: TransactionSigner<TAccountSeller>;
  listing?: Address<TAccountListing>;
  mint: Address<TAccountMint>;
  sellerTokenAccount: Address<TAccountSellerTokenAccount>;
  manager: Address<TAccountManager>;
  wnsProgram?: Address<TAccountWnsProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  listingAmount: ListInstructionDataArgs['listingAmount'];
  paymentMint: ListInstructionDataArgs['paymentMint'];
};

export async function getListInstructionAsync<
  TAccountPayer extends string,
  TAccountSeller extends string,
  TAccountListing extends string,
  TAccountMint extends string,
  TAccountSellerTokenAccount extends string,
  TAccountManager extends string,
  TAccountWnsProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: ListAsyncInput<
    TAccountPayer,
    TAccountSeller,
    TAccountListing,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountManager,
    TAccountWnsProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
): Promise<
  ListInstruction<
    typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountSeller,
    TAccountListing,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountManager,
    TAccountWnsProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: false },
    listing: { value: input.listing ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    sellerTokenAccount: {
      value: input.sellerTokenAccount ?? null,
      isWritable: true,
    },
    manager: { value: input.manager ?? null, isWritable: false },
    wnsProgram: { value: input.wnsProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.listing.value) {
    accounts.listing.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 97, 114, 107, 101, 116, 112, 108, 97, 99, 101])
        ),
        getBytesEncoder().encode(
          new Uint8Array([108, 105, 115, 116, 105, 110, 103])
        ),
        getAddressEncoder().encode(expectAddress(accounts.seller.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.wnsProgram.value) {
    accounts.wnsProgram.value =
      'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM' as Address<'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.listing),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.sellerTokenAccount),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.wnsProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getListInstructionDataEncoder().encode(
      args as ListInstructionDataArgs
    ),
  } as ListInstruction<
    typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountSeller,
    TAccountListing,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountManager,
    TAccountWnsProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ListInput<
  TAccountPayer extends string = string,
  TAccountSeller extends string = string,
  TAccountListing extends string = string,
  TAccountMint extends string = string,
  TAccountSellerTokenAccount extends string = string,
  TAccountManager extends string = string,
  TAccountWnsProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  seller: TransactionSigner<TAccountSeller>;
  listing: Address<TAccountListing>;
  mint: Address<TAccountMint>;
  sellerTokenAccount: Address<TAccountSellerTokenAccount>;
  manager: Address<TAccountManager>;
  wnsProgram?: Address<TAccountWnsProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  listingAmount: ListInstructionDataArgs['listingAmount'];
  paymentMint: ListInstructionDataArgs['paymentMint'];
};

export function getListInstruction<
  TAccountPayer extends string,
  TAccountSeller extends string,
  TAccountListing extends string,
  TAccountMint extends string,
  TAccountSellerTokenAccount extends string,
  TAccountManager extends string,
  TAccountWnsProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: ListInput<
    TAccountPayer,
    TAccountSeller,
    TAccountListing,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountManager,
    TAccountWnsProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
): ListInstruction<
  typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountSeller,
  TAccountListing,
  TAccountMint,
  TAccountSellerTokenAccount,
  TAccountManager,
  TAccountWnsProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: false },
    listing: { value: input.listing ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    sellerTokenAccount: {
      value: input.sellerTokenAccount ?? null,
      isWritable: true,
    },
    manager: { value: input.manager ?? null, isWritable: false },
    wnsProgram: { value: input.wnsProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.wnsProgram.value) {
    accounts.wnsProgram.value =
      'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM' as Address<'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.listing),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.sellerTokenAccount),
      getAccountMeta(accounts.manager),
      getAccountMeta(accounts.wnsProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getListInstructionDataEncoder().encode(
      args as ListInstructionDataArgs
    ),
  } as ListInstruction<
    typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountSeller,
    TAccountListing,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountManager,
    TAccountWnsProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedListInstruction<
  TProgram extends string = typeof WEN_WNS_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    seller: TAccountMetas[1];
    listing: TAccountMetas[2];
    mint: TAccountMetas[3];
    sellerTokenAccount: TAccountMetas[4];
    manager: TAccountMetas[5];
    wnsProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: ListInstructionData;
};

export function parseListInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedListInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      seller: getNextAccount(),
      listing: getNextAccount(),
      mint: getNextAccount(),
      sellerTokenAccount: getNextAccount(),
      manager: getNextAccount(),
      wnsProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getListInstructionDataDecoder().decode(instruction.data),
  };
}
