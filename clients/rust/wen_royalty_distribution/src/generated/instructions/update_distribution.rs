//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct UpdateDistribution {
    pub authority: solana_program::pubkey::Pubkey,

    pub mint: solana_program::pubkey::Pubkey,

    pub payment_mint: solana_program::pubkey::Pubkey,

    pub distribution_account: solana_program::pubkey::Pubkey,

    pub distribution_token_account: Option<solana_program::pubkey::Pubkey>,

    pub authority_token_account: Option<solana_program::pubkey::Pubkey>,

    pub token_program: solana_program::pubkey::Pubkey,

    pub payment_token_program: Option<solana_program::pubkey::Pubkey>,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl UpdateDistribution {
    pub fn instruction(
        &self,
        args: UpdateDistributionInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateDistributionInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payment_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.distribution_account,
            false,
        ));
        if let Some(distribution_token_account) = self.distribution_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                distribution_token_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_ROYALTY_DISTRIBUTION_ID,
                false,
            ));
        }
        if let Some(authority_token_account) = self.authority_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                authority_token_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_ROYALTY_DISTRIBUTION_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        if let Some(payment_token_program) = self.payment_token_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                payment_token_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_ROYALTY_DISTRIBUTION_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = UpdateDistributionInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::WEN_ROYALTY_DISTRIBUTION_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct UpdateDistributionInstructionData {
    discriminator: [u8; 8],
}

impl UpdateDistributionInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [128, 196, 209, 174, 42, 209, 164, 222],
        }
    }
}

impl Default for UpdateDistributionInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateDistributionInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `UpdateDistribution`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[]` mint
///   2. `[]` payment_mint
///   3. `[writable]` distribution_account
///   4. `[writable, optional]` distribution_token_account
///   5. `[writable, optional]` authority_token_account
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   7. `[optional]` payment_token_program
///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct UpdateDistributionBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    payment_mint: Option<solana_program::pubkey::Pubkey>,
    distribution_account: Option<solana_program::pubkey::Pubkey>,
    distribution_token_account: Option<solana_program::pubkey::Pubkey>,
    authority_token_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    payment_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateDistributionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn payment_mint(&mut self, payment_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payment_mint = Some(payment_mint);
        self
    }
    #[inline(always)]
    pub fn distribution_account(
        &mut self,
        distribution_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.distribution_account = Some(distribution_account);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn distribution_token_account(
        &mut self,
        distribution_token_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.distribution_token_account = distribution_token_account;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn authority_token_account(
        &mut self,
        authority_token_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authority_token_account = authority_token_account;
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn payment_token_program(
        &mut self,
        payment_token_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.payment_token_program = payment_token_program;
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateDistribution {
            authority: self.authority.expect("authority is not set"),
            mint: self.mint.expect("mint is not set"),
            payment_mint: self.payment_mint.expect("payment_mint is not set"),
            distribution_account: self
                .distribution_account
                .expect("distribution_account is not set"),
            distribution_token_account: self.distribution_token_account,
            authority_token_account: self.authority_token_account,
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            payment_token_program: self.payment_token_program,
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = UpdateDistributionInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_distribution` CPI accounts.
pub struct UpdateDistributionCpiAccounts<'a, 'b> {
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub authority_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_distribution` CPI instruction.
pub struct UpdateDistributionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub authority_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateDistributionInstructionArgs,
}

impl<'a, 'b> UpdateDistributionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateDistributionCpiAccounts<'a, 'b>,
        args: UpdateDistributionInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            mint: accounts.mint,
            payment_mint: accounts.payment_mint,
            distribution_account: accounts.distribution_account,
            distribution_token_account: accounts.distribution_token_account,
            authority_token_account: accounts.authority_token_account,
            token_program: accounts.token_program,
            payment_token_program: accounts.payment_token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payment_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.distribution_account.key,
            false,
        ));
        if let Some(distribution_token_account) = self.distribution_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *distribution_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_ROYALTY_DISTRIBUTION_ID,
                false,
            ));
        }
        if let Some(authority_token_account) = self.authority_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *authority_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_ROYALTY_DISTRIBUTION_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        if let Some(payment_token_program) = self.payment_token_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *payment_token_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_ROYALTY_DISTRIBUTION_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = UpdateDistributionInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::WEN_ROYALTY_DISTRIBUTION_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.payment_mint.clone());
        account_infos.push(self.distribution_account.clone());
        if let Some(distribution_token_account) = self.distribution_token_account {
            account_infos.push(distribution_token_account.clone());
        }
        if let Some(authority_token_account) = self.authority_token_account {
            account_infos.push(authority_token_account.clone());
        }
        account_infos.push(self.token_program.clone());
        if let Some(payment_token_program) = self.payment_token_program {
            account_infos.push(payment_token_program.clone());
        }
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateDistribution` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` authority
///   1. `[]` mint
///   2. `[]` payment_mint
///   3. `[writable]` distribution_account
///   4. `[writable, optional]` distribution_token_account
///   5. `[writable, optional]` authority_token_account
///   6. `[]` token_program
///   7. `[optional]` payment_token_program
///   8. `[]` system_program
#[derive(Clone, Debug)]
pub struct UpdateDistributionCpiBuilder<'a, 'b> {
    instruction: Box<UpdateDistributionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateDistributionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateDistributionCpiBuilderInstruction {
            __program: program,
            authority: None,
            mint: None,
            payment_mint: None,
            distribution_account: None,
            distribution_token_account: None,
            authority_token_account: None,
            token_program: None,
            payment_token_program: None,
            system_program: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn payment_mint(
        &mut self,
        payment_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payment_mint = Some(payment_mint);
        self
    }
    #[inline(always)]
    pub fn distribution_account(
        &mut self,
        distribution_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distribution_account = Some(distribution_account);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn distribution_token_account(
        &mut self,
        distribution_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.distribution_token_account = distribution_token_account;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn authority_token_account(
        &mut self,
        authority_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authority_token_account = authority_token_account;
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn payment_token_program(
        &mut self,
        payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.payment_token_program = payment_token_program;
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateDistributionInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = UpdateDistributionCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            payment_mint: self
                .instruction
                .payment_mint
                .expect("payment_mint is not set"),

            distribution_account: self
                .instruction
                .distribution_account
                .expect("distribution_account is not set"),

            distribution_token_account: self.instruction.distribution_token_account,

            authority_token_account: self.instruction.authority_token_account,

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            payment_token_program: self.instruction.payment_token_program,

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateDistributionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payment_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distribution_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distribution_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
