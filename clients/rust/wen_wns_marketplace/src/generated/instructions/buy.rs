//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Buy {
    pub payer: solana_program::pubkey::Pubkey,

    pub listing: solana_program::pubkey::Pubkey,

    pub payment_mint: solana_program::pubkey::Pubkey,

    pub buyer: solana_program::pubkey::Pubkey,

    pub distribution: solana_program::pubkey::Pubkey,

    pub mint: solana_program::pubkey::Pubkey,

    pub seller_token_account: solana_program::pubkey::Pubkey,

    pub buyer_token_account: solana_program::pubkey::Pubkey,

    pub seller: solana_program::pubkey::Pubkey,

    pub manager: solana_program::pubkey::Pubkey,

    pub extra_metas_account: solana_program::pubkey::Pubkey,

    pub approve_account: solana_program::pubkey::Pubkey,

    pub wns_program: solana_program::pubkey::Pubkey,

    pub distribution_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub payment_token_program: Option<solana_program::pubkey::Pubkey>,

    pub system_program: solana_program::pubkey::Pubkey,

    pub seller_payment_token_account: Option<solana_program::pubkey::Pubkey>,

    pub buyer_payment_token_account: Option<solana_program::pubkey::Pubkey>,

    pub distribution_payment_token_account: Option<solana_program::pubkey::Pubkey>,
}

impl Buy {
    pub fn instruction(
        &self,
        args: BuyInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BuyInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.listing,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payment_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.buyer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.distribution,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.seller_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.buyer_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.seller,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.manager,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.extra_metas_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.approve_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.wns_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.distribution_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        if let Some(payment_token_program) = self.payment_token_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                payment_token_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        if let Some(seller_payment_token_account) = self.seller_payment_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                seller_payment_token_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(buyer_payment_token_account) = self.buyer_payment_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                buyer_payment_token_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(distribution_payment_token_account) = self.distribution_payment_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                distribution_payment_token_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = BuyInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::WEN_WNS_MARKETPLACE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BuyInstructionData {
    discriminator: [u8; 8],
}

impl BuyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [102, 6, 61, 18, 1, 218, 235, 234],
        }
    }
}

impl Default for BuyInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyInstructionArgs {
    pub buy_amount: u64,
}

/// Instruction builder for `Buy`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` listing
///   2. `[]` payment_mint
///   3. `[writable, signer]` buyer
///   4. `[writable]` distribution
///   5. `[writable]` mint
///   6. `[writable]` seller_token_account
///   7. `[writable]` buyer_token_account
///   8. `[writable]` seller
///   9. `[]` manager
///   10. `[]` extra_metas_account
///   11. `[writable]` approve_account
///   12. `[optional]` wns_program (default to `wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM`)
///   13. `[optional]` distribution_program (default to `diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay`)
///   14. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   15. `[optional]` token_program (default to `TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb`)
///   16. `[optional]` payment_token_program
///   17. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   18. `[writable, optional]` seller_payment_token_account
///   19. `[writable, optional]` buyer_payment_token_account
///   20. `[writable, optional]` distribution_payment_token_account
#[derive(Clone, Debug, Default)]
pub struct BuyBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    listing: Option<solana_program::pubkey::Pubkey>,
    payment_mint: Option<solana_program::pubkey::Pubkey>,
    buyer: Option<solana_program::pubkey::Pubkey>,
    distribution: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    seller_token_account: Option<solana_program::pubkey::Pubkey>,
    buyer_token_account: Option<solana_program::pubkey::Pubkey>,
    seller: Option<solana_program::pubkey::Pubkey>,
    manager: Option<solana_program::pubkey::Pubkey>,
    extra_metas_account: Option<solana_program::pubkey::Pubkey>,
    approve_account: Option<solana_program::pubkey::Pubkey>,
    wns_program: Option<solana_program::pubkey::Pubkey>,
    distribution_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    payment_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    seller_payment_token_account: Option<solana_program::pubkey::Pubkey>,
    buyer_payment_token_account: Option<solana_program::pubkey::Pubkey>,
    distribution_payment_token_account: Option<solana_program::pubkey::Pubkey>,
    buy_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BuyBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn listing(&mut self, listing: solana_program::pubkey::Pubkey) -> &mut Self {
        self.listing = Some(listing);
        self
    }
    #[inline(always)]
    pub fn payment_mint(&mut self, payment_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payment_mint = Some(payment_mint);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn distribution(&mut self, distribution: solana_program::pubkey::Pubkey) -> &mut Self {
        self.distribution = Some(distribution);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn seller_token_account(
        &mut self,
        seller_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.seller_token_account = Some(seller_token_account);
        self
    }
    #[inline(always)]
    pub fn buyer_token_account(
        &mut self,
        buyer_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.buyer_token_account = Some(buyer_token_account);
        self
    }
    #[inline(always)]
    pub fn seller(&mut self, seller: solana_program::pubkey::Pubkey) -> &mut Self {
        self.seller = Some(seller);
        self
    }
    #[inline(always)]
    pub fn manager(&mut self, manager: solana_program::pubkey::Pubkey) -> &mut Self {
        self.manager = Some(manager);
        self
    }
    #[inline(always)]
    pub fn extra_metas_account(
        &mut self,
        extra_metas_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.extra_metas_account = Some(extra_metas_account);
        self
    }
    #[inline(always)]
    pub fn approve_account(
        &mut self,
        approve_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.approve_account = Some(approve_account);
        self
    }
    /// `[optional account, default to 'wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM']`
    #[inline(always)]
    pub fn wns_program(&mut self, wns_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.wns_program = Some(wns_program);
        self
    }
    /// `[optional account, default to 'diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay']`
    #[inline(always)]
    pub fn distribution_program(
        &mut self,
        distribution_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.distribution_program = Some(distribution_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn payment_token_program(
        &mut self,
        payment_token_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.payment_token_program = payment_token_program;
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn seller_payment_token_account(
        &mut self,
        seller_payment_token_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.seller_payment_token_account = seller_payment_token_account;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn buyer_payment_token_account(
        &mut self,
        buyer_payment_token_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.buyer_payment_token_account = buyer_payment_token_account;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn distribution_payment_token_account(
        &mut self,
        distribution_payment_token_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.distribution_payment_token_account = distribution_payment_token_account;
        self
    }
    #[inline(always)]
    pub fn buy_amount(&mut self, buy_amount: u64) -> &mut Self {
        self.buy_amount = Some(buy_amount);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Buy {
            payer: self.payer.expect("payer is not set"),
            listing: self.listing.expect("listing is not set"),
            payment_mint: self.payment_mint.expect("payment_mint is not set"),
            buyer: self.buyer.expect("buyer is not set"),
            distribution: self.distribution.expect("distribution is not set"),
            mint: self.mint.expect("mint is not set"),
            seller_token_account: self
                .seller_token_account
                .expect("seller_token_account is not set"),
            buyer_token_account: self
                .buyer_token_account
                .expect("buyer_token_account is not set"),
            seller: self.seller.expect("seller is not set"),
            manager: self.manager.expect("manager is not set"),
            extra_metas_account: self
                .extra_metas_account
                .expect("extra_metas_account is not set"),
            approve_account: self.approve_account.expect("approve_account is not set"),
            wns_program: self.wns_program.unwrap_or(solana_program::pubkey!(
                "wns1gDLt8fgLcGhWi5MqAqgXpwEP1JftKE9eZnXS1HM"
            )),
            distribution_program: self.distribution_program.unwrap_or(solana_program::pubkey!(
                "diste3nXmK7ddDTs1zb6uday6j4etCa9RChD8fJ1xay"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
            )),
            payment_token_program: self.payment_token_program,
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            seller_payment_token_account: self.seller_payment_token_account,
            buyer_payment_token_account: self.buyer_payment_token_account,
            distribution_payment_token_account: self.distribution_payment_token_account,
        };
        let args = BuyInstructionArgs {
            buy_amount: self.buy_amount.clone().expect("buy_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `buy` CPI accounts.
pub struct BuyCpiAccounts<'a, 'b> {
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub listing: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller: &'b solana_program::account_info::AccountInfo<'a>,

    pub manager: &'b solana_program::account_info::AccountInfo<'a>,

    pub extra_metas_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub approve_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub wns_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub buyer_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub distribution_payment_token_account:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `buy` CPI instruction.
pub struct BuyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub listing: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller: &'b solana_program::account_info::AccountInfo<'a>,

    pub manager: &'b solana_program::account_info::AccountInfo<'a>,

    pub extra_metas_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub approve_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub wns_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub distribution_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub seller_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub buyer_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub distribution_payment_token_account:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: BuyInstructionArgs,
}

impl<'a, 'b> BuyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BuyCpiAccounts<'a, 'b>,
        args: BuyInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            listing: accounts.listing,
            payment_mint: accounts.payment_mint,
            buyer: accounts.buyer,
            distribution: accounts.distribution,
            mint: accounts.mint,
            seller_token_account: accounts.seller_token_account,
            buyer_token_account: accounts.buyer_token_account,
            seller: accounts.seller,
            manager: accounts.manager,
            extra_metas_account: accounts.extra_metas_account,
            approve_account: accounts.approve_account,
            wns_program: accounts.wns_program,
            distribution_program: accounts.distribution_program,
            associated_token_program: accounts.associated_token_program,
            token_program: accounts.token_program,
            payment_token_program: accounts.payment_token_program,
            system_program: accounts.system_program,
            seller_payment_token_account: accounts.seller_payment_token_account,
            buyer_payment_token_account: accounts.buyer_payment_token_account,
            distribution_payment_token_account: accounts.distribution_payment_token_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.listing.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payment_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.buyer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.distribution.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.seller_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.buyer_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.seller.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.manager.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.extra_metas_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.approve_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.wns_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.distribution_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        if let Some(payment_token_program) = self.payment_token_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *payment_token_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        if let Some(seller_payment_token_account) = self.seller_payment_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *seller_payment_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(buyer_payment_token_account) = self.buyer_payment_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *buyer_payment_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        if let Some(distribution_payment_token_account) = self.distribution_payment_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *distribution_payment_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::WEN_WNS_MARKETPLACE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = BuyInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::WEN_WNS_MARKETPLACE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(21 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.listing.clone());
        account_infos.push(self.payment_mint.clone());
        account_infos.push(self.buyer.clone());
        account_infos.push(self.distribution.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.seller_token_account.clone());
        account_infos.push(self.buyer_token_account.clone());
        account_infos.push(self.seller.clone());
        account_infos.push(self.manager.clone());
        account_infos.push(self.extra_metas_account.clone());
        account_infos.push(self.approve_account.clone());
        account_infos.push(self.wns_program.clone());
        account_infos.push(self.distribution_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.token_program.clone());
        if let Some(payment_token_program) = self.payment_token_program {
            account_infos.push(payment_token_program.clone());
        }
        account_infos.push(self.system_program.clone());
        if let Some(seller_payment_token_account) = self.seller_payment_token_account {
            account_infos.push(seller_payment_token_account.clone());
        }
        if let Some(buyer_payment_token_account) = self.buyer_payment_token_account {
            account_infos.push(buyer_payment_token_account.clone());
        }
        if let Some(distribution_payment_token_account) = self.distribution_payment_token_account {
            account_infos.push(distribution_payment_token_account.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Buy` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` listing
///   2. `[]` payment_mint
///   3. `[writable, signer]` buyer
///   4. `[writable]` distribution
///   5. `[writable]` mint
///   6. `[writable]` seller_token_account
///   7. `[writable]` buyer_token_account
///   8. `[writable]` seller
///   9. `[]` manager
///   10. `[]` extra_metas_account
///   11. `[writable]` approve_account
///   12. `[]` wns_program
///   13. `[]` distribution_program
///   14. `[]` associated_token_program
///   15. `[]` token_program
///   16. `[optional]` payment_token_program
///   17. `[]` system_program
///   18. `[writable, optional]` seller_payment_token_account
///   19. `[writable, optional]` buyer_payment_token_account
///   20. `[writable, optional]` distribution_payment_token_account
#[derive(Clone, Debug)]
pub struct BuyCpiBuilder<'a, 'b> {
    instruction: Box<BuyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BuyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BuyCpiBuilderInstruction {
            __program: program,
            payer: None,
            listing: None,
            payment_mint: None,
            buyer: None,
            distribution: None,
            mint: None,
            seller_token_account: None,
            buyer_token_account: None,
            seller: None,
            manager: None,
            extra_metas_account: None,
            approve_account: None,
            wns_program: None,
            distribution_program: None,
            associated_token_program: None,
            token_program: None,
            payment_token_program: None,
            system_program: None,
            seller_payment_token_account: None,
            buyer_payment_token_account: None,
            distribution_payment_token_account: None,
            buy_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn listing(
        &mut self,
        listing: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.listing = Some(listing);
        self
    }
    #[inline(always)]
    pub fn payment_mint(
        &mut self,
        payment_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payment_mint = Some(payment_mint);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn distribution(
        &mut self,
        distribution: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distribution = Some(distribution);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn seller_token_account(
        &mut self,
        seller_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.seller_token_account = Some(seller_token_account);
        self
    }
    #[inline(always)]
    pub fn buyer_token_account(
        &mut self,
        buyer_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.buyer_token_account = Some(buyer_token_account);
        self
    }
    #[inline(always)]
    pub fn seller(
        &mut self,
        seller: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.seller = Some(seller);
        self
    }
    #[inline(always)]
    pub fn manager(
        &mut self,
        manager: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.manager = Some(manager);
        self
    }
    #[inline(always)]
    pub fn extra_metas_account(
        &mut self,
        extra_metas_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.extra_metas_account = Some(extra_metas_account);
        self
    }
    #[inline(always)]
    pub fn approve_account(
        &mut self,
        approve_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.approve_account = Some(approve_account);
        self
    }
    #[inline(always)]
    pub fn wns_program(
        &mut self,
        wns_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.wns_program = Some(wns_program);
        self
    }
    #[inline(always)]
    pub fn distribution_program(
        &mut self,
        distribution_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distribution_program = Some(distribution_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn payment_token_program(
        &mut self,
        payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.payment_token_program = payment_token_program;
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn seller_payment_token_account(
        &mut self,
        seller_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.seller_payment_token_account = seller_payment_token_account;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn buyer_payment_token_account(
        &mut self,
        buyer_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.buyer_payment_token_account = buyer_payment_token_account;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn distribution_payment_token_account(
        &mut self,
        distribution_payment_token_account: Option<
            &'b solana_program::account_info::AccountInfo<'a>,
        >,
    ) -> &mut Self {
        self.instruction.distribution_payment_token_account = distribution_payment_token_account;
        self
    }
    #[inline(always)]
    pub fn buy_amount(&mut self, buy_amount: u64) -> &mut Self {
        self.instruction.buy_amount = Some(buy_amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BuyInstructionArgs {
            buy_amount: self
                .instruction
                .buy_amount
                .clone()
                .expect("buy_amount is not set"),
        };
        let instruction = BuyCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            listing: self.instruction.listing.expect("listing is not set"),

            payment_mint: self
                .instruction
                .payment_mint
                .expect("payment_mint is not set"),

            buyer: self.instruction.buyer.expect("buyer is not set"),

            distribution: self
                .instruction
                .distribution
                .expect("distribution is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            seller_token_account: self
                .instruction
                .seller_token_account
                .expect("seller_token_account is not set"),

            buyer_token_account: self
                .instruction
                .buyer_token_account
                .expect("buyer_token_account is not set"),

            seller: self.instruction.seller.expect("seller is not set"),

            manager: self.instruction.manager.expect("manager is not set"),

            extra_metas_account: self
                .instruction
                .extra_metas_account
                .expect("extra_metas_account is not set"),

            approve_account: self
                .instruction
                .approve_account
                .expect("approve_account is not set"),

            wns_program: self
                .instruction
                .wns_program
                .expect("wns_program is not set"),

            distribution_program: self
                .instruction
                .distribution_program
                .expect("distribution_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            payment_token_program: self.instruction.payment_token_program,

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            seller_payment_token_account: self.instruction.seller_payment_token_account,

            buyer_payment_token_account: self.instruction.buyer_payment_token_account,

            distribution_payment_token_account: self.instruction.distribution_payment_token_account,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct BuyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    listing: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payment_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distribution: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    manager: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    extra_metas_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    approve_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wns_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distribution_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payment_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distribution_payment_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buy_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
